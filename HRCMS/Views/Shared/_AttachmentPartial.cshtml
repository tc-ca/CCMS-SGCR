@using Microsoft.AspNetCore.Mvc.Localization
@using System.Globalization
@using Microsoft.AspNetCore.Localization;

@inject IViewLocalizer Localizer
@inject IHtmlLocalizer<SharedResource> SharedLocalizer

<link rel="stylesheet" type="text/css" href="~/css/dragdrop.css">
@model AnnotationModel
<div class="wb-frmvld">
    <form asp-action="UploadAttachment" enctype="multipart/form-data" method="post" id="js-upload-form" class="js-upload-form">
        <section class="panel panel-primary hght-inhrt">
            <div class="panel-heading">

                @Localizer["Upload Attachment"]

            </div>
            <div class="panel-body">
                <div class="form-group">
                    @Html.Hidden("caseId", Url.ActionContext.RouteData.Values["id"])
                    <label asp-for="@Model.Subject" class="required"><span class="field-name">@Localizer["Subject"]</span> <strong class="required">(@SharedLocalizer["required"])</strong></label>
                    @*@Html.ValidationMessageFor(m => m.Subject, "", htmlAttributes: new { @class = "label label-danger wb-server-error" })*@
                    @Html.TextBoxFor(m => m.Subject, new { @class = "form-control", @maxlength = "250", @required = "required" })

                </div>
                <div class="form-group">
                    <label asp-for="@Model.NoteText" class="required"><span class="field-name">@Localizer["Note Text"]</span></label>
                    @Html.TextAreaFor(m => m.NoteText, 3, 50, new { @class = "form-control", @maxlength = "1000" })
                </div>
                <div class="form-group">

                    <label class="required"><span class="field-name">@Localizer["Input File"]</span> <strong class="required">
    (@SharedLocalizer["required"])
</strong></label>
                    <div class="box">
                        <div class="box__input">
                            <svg class="box__icon" xmlns="http://www.w3.org/2000/svg" width="50" height="43" viewBox="0 0 50 43">
                                <path d="M48.4 26.5c-.9 0-1.7.7-1.7 1.7v11.6h-43.3v-11.6c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v13.2c0 .9.7 1.7 1.7 1.7h46.7c.9 0 1.7-.7 1.7-1.7v-13.2c0-1-.7-1.7-1.7-1.7zm-24.5 6.1c.3.3.8.5 1.2.5.4 0 .9-.2 1.2-.5l10-11.6c.7-.7.7-1.7 0-2.4s-1.7-.7-2.4 0l-7.1 8.3v-25.3c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v25.3l-7.1-8.3c-.7-.7-1.7-.7-2.4 0s-.7 1.7 0 2.4l10 11.6z"></path>
                            </svg>
                            @Html.TextBoxFor(m => m.File, new { @type = "file", @class = "box__file", @required = "required" })
                            <label asp-for="@Model.File" id="lblForFile" class="required"><span class="text-primary">@Localizer["Choose a file"]</span>&nbsp;<span class="box__dragndrop">@Localizer["or drage it here"]</span>.</label>
                        </div>
                    </div>
</div>
                <div class="form-group">
                    <input type="submit" id="btnUploadAttachment" asp-action="UploadAttachment" value="@Localizer["Upload File"]" class="btn btn-default" />
                </div>
                <div class="box__uploading">@Localizer["Uploading"]&hellip;</div>
            </div>
        </section>
    </form>
</div>

<script>
    // UPLOAD CLASS DEFINITION
    // ======================
    (function () {
        // feature detection for drag&drop upload
        var isAdvancedUpload = function () {
            var div = document.createElement('div');
            return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div)) && 'FormData' in window && 'FileReader' in window;
        }();


        // applying the effect for every form
        var forms = document.querySelectorAll('.js-upload-form');
        Array.prototype.forEach.call(forms, function (form) {
            var input = form.querySelector('input[type="file"]'),
                divBox = form.querySelector('.box'),
                label = form.querySelector('#lblForFile'),
                subject = form.querySelector('#Subject'),
                noteText = form.querySelector('#NoteText'),
                errorMsg = form.querySelector('.box__error span'),
                restart = form.querySelectorAll('.box__restart'),
                droppedFiles = false,
                showFiles = function (files) {
                    label.textContent = files[0].name;
                },
                triggerFormSubmit = function () {
                    var event = document.createEvent('HTMLEvents');
                    event.initEvent('submit', true, false);
                    form.dispatchEvent(event);
                };

            // letting the server side to know we are going to make an Ajax request
            var ajaxFlag = document.createElement('input');
            ajaxFlag.setAttribute('type', 'hidden');
            ajaxFlag.setAttribute('name', 'ajax');
            ajaxFlag.setAttribute('value', 1);
            form.appendChild(ajaxFlag);

            // automatically submit the form on file select
            input.addEventListener('change', function (e) {
                showFiles(e.target.files);

                //console.log($('js-upload-form'));

            });



            // drag&drop files if the feature is available
            if (isAdvancedUpload) {
                divBox.classList.add('has-advanced-upload'); // letting the CSS part to know drag&drop is supported by the browser

                ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'].forEach(function (event) {
                    form.addEventListener(event, function (e) {
                        // preventing the unwanted behaviours
                        e.preventDefault();
                        e.stopPropagation();
                    });
                });
                ['dragover', 'dragenter'].forEach(function (event) {
                    form.addEventListener(event, function () {
                        divBox.classList.add('is-dragover');
                    });
                });
                ['dragleave', 'dragend', 'drop'].forEach(function (event) {
                    form.addEventListener(event, function () {
                        divBox.classList.remove('is-dragover');
                    });
                });
                form.addEventListener('drop', function (e) {
                    droppedFiles = e.dataTransfer.files; // the files that were dropped
                    input.removeAttribute("required", "required");
                    showFiles(droppedFiles);

                });
            }



            // if the form was submitted
            form.addEventListener('submit', function (e) {
                debugger;

                //Required field
                if (!subject.value || !droppedFiles) return false;

                // preventing the duplicate submissions if the current one is in progress
                if (divBox.classList.contains('is-uploading')) return false;

                divBox.classList.add('is-uploading');
                divBox.classList.remove('is-error');

                if (isAdvancedUpload) // ajax file upload for modern browsers
                {
                    e.preventDefault();

                    // gathering the form data
                    var ajaxData = new FormData(form);
                    if (droppedFiles) {
                        Array.prototype.forEach.call(droppedFiles, function (file) {
                            ajaxData.append(input.getAttribute('name'), file);
                        });
                        ajaxData.append(subject.getAttribute('name'), subject.value);
                        ajaxData.append(noteText.getAttribute('name'), noteText.value);

                    }

                    //ajax request
                    var ajax = new XMLHttpRequest();
                    ajax.open(form.getAttribute('method'), form.getAttribute('action'), true);

                    ajax.onload = function () {
                        //divBox.classList.remove('is-uploading');
                        if (ajax.status >= 200 && ajax.status < 400) {
                            var data = JSON.parse(ajax.responseText);
                            divBox.classList.add(data.success == true ? 'is-success' : 'is-error');
                            if (!data.success) errorMsg.textContent = data.error;
                        }
                        else alert('Error. Please, contact the webmaster!');
                    };

                    ajax.onerror = function () {
                        divBox.classList.remove('is-uploading');
                        alert('Error. Please, try again!');
                    };

                    ajax.send(ajaxData);
                    setTimeout(() => { location.reload(); }, 3000);

                }
                else // fallback Ajax solution upload for older browsers
                {
                    var iframeName = 'uploadiframe' + new Date().getTime(),
                        iframe = document.createElement('iframe');

                    $iframe = $('<iframe name="' + iframeName + '" style="display: none;"></iframe>');

                    iframe.setAttribute('name', iframeName);
                    iframe.style.display = 'none';

                    document.body.appendChild(iframe);
                    form.setAttribute('target', iframeName);

                    iframe.addEventListener('load', function () {
                        var data = JSON.parse(iframe.contentDocument.body.innerHTML);
                        divBox.classList.remove('is-uploading')
                        divBox.classList.add(data.success == true ? 'is-success' : 'is-error')
                        form.removeAttribute('target');
                        if (!data.success) errorMsg.textContent = data.error;
                        iframe.parentNode.removeChild(iframe);
                    });
                }
            });


            // restart the form if has a state of error/success
            Array.prototype.forEach.call(restart, function (entry) {
                entry.addEventListener('click', function (e) {
                    e.preventDefault();
                    divBox.classList.remove('is-error', 'is-success');
                    input.click();
                });
            });

            // Firefox focus bug fix for file input
            input.addEventListener('focus', function () { input.classList.add('has-focus'); });
            input.addEventListener('blur', function () { input.classList.remove('has-focus'); });

        });
    }(document));
</script>
