@model HRCMS.ViewModels.HRCaseModel

@{
    if (String.IsNullOrEmpty(Model.CaseNumber))
    {
        ViewData["Title"] = "Create New Case";
    }
    else
    {
        ViewData["Title"] = "HR Case:" + Model.CaseNumber;
    }
}
<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-12">
        <div class="wb-frmvld">
            <form asp-action="Save">
                @Html.HiddenFor(m => m.CaseId)
                <div class="form-group">
                    @Html.LabelFor(m => m.PRI, new { @class = "control-label " })
                    @Html.TextBoxFor(m => m.PRI, new { @class = "form-control", @maxlength = "250", @readonly = "readonly", @required = "required" })
                </div>
                <div class="form-group">

                    @Html.LabelFor(m => m.LastName, new { @class = "control-label " })
                    @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", @maxlength = "250", @readonly = "readonly", @required = "required" })
                </div>
                <div class="form-group">

                    @Html.LabelFor(m => m.FirstName, new { @class = "control-label " })
                    @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", @maxlength = "250", @readonly = "readonly", @required = "required" })
                </div>
                <div class="form-group">
                    <label asp-for="@Model.Email" class="required"><span class="field-name">Email</span> <strong class="required">(required)</strong></label>
                    @Html.ValidationMessageFor(m => m.Email, "", htmlAttributes: new { @class = "text-danger" })
                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @maxlength = "250", @required = "required" })
                </div>
                <div class="form-group">
                    <label asp-for="@Model.CaseType.TypeId" class="required"><span class="field-name">Case Type</span> <strong class="required">(required)</strong></label>
                    @Html.ValidationMessageFor(m => m.CaseType.TypeId, "", htmlAttributes: new { @class = "text-danger col-md-12" })
                    @Html.DropDownListFor(m => m.CaseType.TypeId, Model.CaseTypes, "--", htmlAttributes: new { @class = "form-control", @required = "required" })
                </div>
                <div class="form-group">
                    <label asp-for="@Model.CaseSubType.SubTypeId" class="required"><span class="field-name">Case Sub Type</span> <strong class="required">(required)</strong></label>
                    @Html.ValidationMessageFor(m => m.CaseSubType.SubTypeId, "", htmlAttributes: new { @class = "text-danger col-md-12" })
                    @Html.DropDownListFor(m => m.CaseSubType.SubTypeId, Model.CaseSubTypes, "--", htmlAttributes: new { @class = "form-control", @required = "required" })
                </div>
                <div class="form-group">

                    @Html.LabelFor(m => m.Description, new { @class = "control-label " })
                    @Html.ValidationMessageFor(m => m.Description, "", htmlAttributes: new { @class = "text-danger" })
                    @Html.TextAreaFor(m => m.Description, 5, 200, new { @class = "form-control", @maxlength = "4000" })
                </div>
                <div class="form-group">
                    <input type="submit" value="Save" class="btn btn-primary" />
                    <a asp-action="List" class="btn btn-default">Cancel</a>

                </div>
            </form>
        </div>
    </div>
</div>

<div>
    <a asp-action="List">Back to List</a>
</div>
@section CustomScripts {
    @*@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}*@
    <script type="text/javascript">
    $(document).ready(function () {
        var textarea = $('textarea[maxlength]');
        var text = ' characters remaining.';

        $.fn.getCharactersRemaining = function () {
            var length = $(this).val().length;
            var maxLength = parseInt($(this).attr('maxlength'));
            var remaining = maxLength - length;

            return remaining;
        };

        textarea.each(function () {
            var html = '<span class="counter">' + $(this).getCharactersRemaining() + '</span>' + text;

            //display the character count below the textarea when the page loads.
            $(this).after(html);

            $(this).on("input keyup keydown focus", function () {
                //update character count as you type.
                $(this).next('.counter').text($(this).getCharactersRemaining());
            });
        });

        $('#CaseType_TypeId').change(function () {
            var selectedCaseTypeId = $("#CaseType_TypeId").val();
            var CaseSubTypeIdsSelect = $('#CaseSubType_SubTypeId');
                CaseSubTypeIdsSelect.empty();
                if (selectedCaseTypeId != null && selectedCaseTypeId != '') {
                    $.getJSON('@Url.Action("GetCaseSubTypes")', { caseTypeId: selectedCaseTypeId }, function (CaseSubTypeIds) {
                        if (CaseSubTypeIds != null && !jQuery.isEmptyObject(CaseSubTypeIds))
                        {
                            CaseSubTypeIdsSelect.append($('<option/>', {
                                value: "",
                                text: "--"
                            }));
                            $.each(CaseSubTypeIds, function (index, subtype) {
                                CaseSubTypeIdsSelect.append($('<option/>', {
                                    value: subtype.value,
                                    text: subtype.text
                                }));
                            });
                        };
                    });
                }
            });
    });

    </script>
}

