<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="&lt;acronym title='Personal Record Identifier'&gt;PRI&lt;/acronym&gt;" xml:space="preserve">
    <value>&lt;acronym title='Personal Record Identifier'&gt;PRI&lt;/acronym&gt;</value>
  </data>
  <data name="Add a new case" xml:space="preserve">
    <value>Add a new case</value>
  </data>
  <data name="Are you sure you want to submit the case?" xml:space="preserve">
    <value>Are you sure you want to submit the case?</value>
  </data>
  <data name="Attachment Description" xml:space="preserve">
    <value>Attachment Description</value>
  </data>
  <data name="Attachments" xml:space="preserve">
    <value>Attachments</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Case Sub Type" xml:space="preserve">
    <value>Case Sub Type</value>
  </data>
  <data name="Case Summary" xml:space="preserve">
    <value>Case Summary</value>
  </data>
  <data name="Case Type" xml:space="preserve">
    <value>Case Type</value>
  </data>
  <data name="Create New Case" xml:space="preserve">
    <value>Create New Case</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Employee Information" xml:space="preserve">
    <value>Employee Information</value>
  </data>
  <data name="File Name" xml:space="preserve">
    <value>File Name</value>
  </data>
  <data name="First Name" xml:space="preserve">
    <value>First Name</value>
  </data>
  <data name="Inquiry" xml:space="preserve">
    <value>Inquiry</value>
  </data>
  <data name="Last Name" xml:space="preserve">
    <value>Last Name</value>
  </data>
  <data name="New Case" xml:space="preserve">
    <value>New Case</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="PageInstruction" xml:space="preserve">
    <value>&lt;h2&gt;IMPORTANT:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Inquiries related to Disability Insurance and to Sick leave are to be sent to &lt;a href="mailto:TC.DisabilityInsurance-Gestiondincapacite.TC@tc.gc.ca"&gt;TC.DisabilityInsurance-Gestiondincapacite.TC@tc.gc.ca&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;You must save before submitting if you would like to add an attachment to your case. Once your request is submitted, it can no longer be modified.&lt;/li&gt;
&lt;/ul&gt;</value>
  </data>
  <data name="Pay Case" xml:space="preserve">
    <value>Pay Case</value>
  </data>
  <data name="Please make a selection" xml:space="preserve">
    <value>Please make a selection</value>
  </data>
  <data name="Please provide the details of your inquiry" xml:space="preserve">
    <value>Please provide the details of your inquiry</value>
  </data>
  <data name="Submit case" xml:space="preserve">
    <value>Submit case</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="View my cases" xml:space="preserve">
    <value>View my cases</value>
  </data>
  <data name="Your case was successfully saved." xml:space="preserve">
    <value>Your case was successfully saved.</value>
  </data>
</root>